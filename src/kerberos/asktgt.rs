use connector::KerberosConnection;
use crate::kerberos::connector;
use kerberos_crypto::aes_hmac_sha1;

pub fn asktgt(args: Vec<String>)
{
    /*
        Asktgt
        - Init connection and identity
        - Create timestamp
        - Encrypt with identity
        let timestamp = PaEncTsEnc::from(Utc::now());

     */

    let mut connection = KerberosConnection::new(args);

    let asreq: [u8; 252] = [
        0x00, 0x00, 0x00, 0xf8, // Length of the message (excluding these 4 bytes)
        0x6a, 0x81, 0xf5, 0x30, 0x81, 0xf2, 0xa1, 0x03, 0x02, 0x01, // ???
        0x05, // "pvno"
        0xa2, 0x03, 0x02, 0x01, // ???
        0x0a, // MESSAGE TYPE = ASREQ (10)
        0xa3, 0x58, 0x30, 0x56, // ???
        0x30, 0x41, 0xa1, 0x03, 0x02, 0x01, // ???
        0x02, // Pre-authentication data type -> (2) = Encrypted Time Stamp
        0xa2,
        0x3a, 0x04, 0x38, 0x30, 0x36, 0xa0, 0x03, 0x02, 0x01, 0x17, 0xa2, 0x2f, 0x04, 0x2d, 0x55, 0x7a,
        0x9a, 0x89, 0x10, 0x05, 0x7a, 0x86, 0x19, 0x83, 0xe0, 0x98, 0xcf, 0x28, 0xcb, 0x16, 0x1e, 0x30,
        0xa4, 0x0e, 0xf1, 0x30, 0xe3, 0xcc, 0x33, 0x90, 0x43, 0x99, 0xc5, 0x85, 0x4f, 0x90, 0x04, 0x9f,
        0xeb, 0x6e, 0xf7, 0x3f, 0x9e, 0x73, 0xbd, 0xf3, 0x7f, 0x64, 0xe5, 0x30, 0x11, 0xa1, 0x04, 0x02,
        0x02, 0x00, 0x80, 0xa2, 0x09, 0x04, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x01, 0x01, 0x01, 0xa4, 0x81,
        0x8b, 0x30, 0x81, 0x88, 0xa0, 0x07, 0x03, 0x05, 0x00, 0x40, 0x80, 0x00, 0x10, 0xa1, 0x16, 0x30,
        0x14, 0xa0, 0x03, 0x02, 0x01, 0x01, 0xa1, 0x0d, 0x30, 0x0b, 0x1b, 0x09, 0x6a, 0x61, 0x6b, 0x65,
        0x2e, 0x6f, 0x74, 0x74, 0x65, 0xa2, 0x17, 0x1b, 0x15, 0x61, 0x64, 0x2e, 0x74, 0x61, 0x6e, 0x6e,
        0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0xa3, 0x2a,
        0x30, 0x28, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa1, 0x21, 0x30, 0x1f, 0x1b, 0x06, 0x6b, 0x72, 0x62,
        0x74, 0x67, 0x74, 0x1b, 0x15, 0x61, 0x64, 0x2e, 0x74, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x65,
        0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0xa5, 0x11, 0x18, 0x0f, 0x32, 0x30,
        0x33, 0x37, 0x30, 0x39, 0x31, 0x32, 0x32, 0x32, 0x34, 0x38, 0x30, 0x35, 0x5a, 0xa7, 0x06, 0x02,
        0x04, 0x7f, 0xd1, 0xe1, 0x77, 0xa8, 0x05, 0x30, 0x03, 0x02, 0x01, 0x17,
    ];
    connection.write_stream(&asreq);

    let mut asrep : Vec<u8> = Vec::new();
    connection.read_stream(&mut asrep);
}